泛型是'JDK1.5'以后出现的新特性。用于解决安全问题，是一个安全机制，
好处：
	1，将运行时期出现的问题 ClassCastException 转移到了编译时期，方便于程序猿解决问题。让运行时期问题减少。安全。
	2，避免了强制转换的麻烦。
通过<>来定义要操作的引用数据类型。
在使用JAVA提供的对象时。什么时候使用泛型？
	通常在集合框架中很常见。只要见到<>。就要定义泛型。
什么时候定义泛型类。
	当类中要操作的引用数据类型不确定的时候。早期定义 Object 来完成扩展。现在定义泛型来完成扩展。

特殊之处：
	静态方法，不可以访问类上定义的泛型。如果静态方法，操作的引用数据类型不确定。可以将泛型定义在方法上。
--------------------------------------
泛型方法
使用泛型方法，需要定义一个类型。使用大写字母T表示
	这个T表示任意的类型
	写在返回值void之前
	泛型不能定义是基本数据类型
	int[] -- Integer[]
	char[] -- Character[]
例
public static <T> void swap(T[] arr,int a,int b)
{
	T temp = arr[a];
	arr[a] = arr[b];
	arr[b] = temp;
}
/*
	占位符。谁调用。那么这个T就是谁！
	从而不用顾忌传入String或者int类型的时候。报错
*/
泛型类
	在一个类上定义一个"类型".这个类型可以在这个类里面直接使用！
例
class Test<T>
{
	//在类里面可以直接使用T这个类型
	private T t;
	public void method(T tt)
	{
		
	}
}
/*
	在类上面的定义的泛型。不能在静态方法里使用
	静态方法可以用-泛型方法！来自定义一个泛型！
*/
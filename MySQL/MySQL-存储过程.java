-----------------------
MYSQL-存储过程			|
-----------------------
	# 从代码上理解,其实就是一个没有返回值的函数
	# 也可以理解为是一种数据的处理方式


-----------------------
MYSQL-创建				|
-----------------------
	# 语法
		delimiter $$
		create procedure [过程名字] ([形参列表])
			bengin
				//过程体
			end $$
		delimiter ;
	# Ddemo
		create procedure dem() 
		begin
			select * from exam();
		end $$

-----------------------
MYSQL-查看				|
-----------------------
	# show procedure status;
	# 也可以添加like语句,来进行模糊查询
	# 查看创建语句
	# show create procedure [过程名字];

-----------------------
MYSQL-删除				|
-----------------------
	# 存储过程没辙编辑,只能先删除后新增
	# drop procedure [过程名字];

-----------------------
MYSQL-调用				|
-----------------------
	# 没有返回值,也就是说'SELECT',是不能访问的.
	# 调用过程,有一个专门的调用关键字:call
	# call [过程名字]([参数]);

-----------------------
MYSQL-参数				|
-----------------------
	# 函数的参数需要数据类型指定,过程比函数更'严格'.
	# 过程还有自己的类型限定
		1,in
			* 数据只是从外部传入给内部使用(值传递),可以是数值,或者变量.不会影响外部
		2,out
			* 只允许过程内部使用(不用外部数据),给外部使用
			* 外部的数据会被先情况,才会进入到内部.'只能是变量'
			* 属于引用传递,内部修改.会影响到外部
		3,inout
			* 外部的可以在内部使用,内部修改,会引响到外部.
			* 典型的引用传递.'只能传变量'
	
	# 基本使用
		create procedure [名字](in [形参名] [数据类型],out [形参名字] [数据类型],inout [形参名字] [数据类型])
		... ...
	# 存储过程,对于变量的操作(返回),是滞后的:是在存储过程调用结束的时候,才会重新把内部修改的值.赋给外部传入的全局变量.
	# Demo
		DELIMITER $$
		create procedure demo(in p1 int ,out p2 int ,inout p3 int)
		begin
			SELECT p1,p2,p3;
		end $$
		DELIMITER ;

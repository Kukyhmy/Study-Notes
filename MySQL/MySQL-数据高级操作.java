------------------------
MYSQL-高级操作			|
------------------------

-----------------------
主键冲突处理			|
-----------------------
	# 主键冲突处理
		1,更新
			insert into [表名](包含主键的字段) values(包含主键的值) on duplicate key update 字段 = 新值;
			insert into demo values('1','kevin') on duplicate key update id = '2';
			* '如果主键已经存在,那么就把已经存在的所有记录值(包括主键),替换为刚插入的值'

		2,替换
			replace into [表名](包含主键的字段) values(包含主键的值) 
			replace into demo values('1','哈哈');
			* '如果冲突,就把刚插入的值.替换为新值'
			
-----------------------
蠕虫复制				|
-----------------------
	# 一个蠕虫,断开.就是两个了.
	# 从已有的数据中,去获取数据.将数据进行新增操作
	# 数据成倍的增加
	1,从已有表,复制新表(不包含数据)
		create table [表名] like [数据库].[表名];
		* 如果参考表就在当前数据库中,那么可以省略数据库名
	
	2,蠕虫复制
		insert into [表名](字段列表) select (字段列表,或者*号) from 数据表;
		* 其实就是插入的数据,是来自于查询出来的数据
		* 可以添加条件来进行约束,不然就会全部执行
		* 这东西意义在于,从已有表复制数据到新表中
		* 还可以迅速的让表中的数据膨胀,膨胀到一定的数量.可以测试数据库的性能,压力等
		
------------------------
更新数据(限制更新记录)	|
------------------------
	# update [表名] set 字段=值 where [条件];
	# 限制的更新数量
		update [表名] set 字段=值 where [条件] limit count;
		* 限制更新的数量(由count指定)

------------------------
删除数据(限制删除记录)	|
------------------------
	# 和更新类似,通过limit限制数量
		delete from [表名] where [条件] limit count;
		* 删除符合条件的,count条数据
	
	# 先删除改变,后新增改变
		truncate [表名];
		* 重置表,清空表中的数据.让自增长从0开始


















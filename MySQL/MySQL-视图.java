----------------------------
MySQL - 视图				|
----------------------------
	# 视图 View
	# 是一种有结构(有行有列),但是没结果(结构中不存放数据)的虚拟表
		* 虚拟表的结构来源,不是自己定义.而是从对应的基表(视图)中产生
	# 意义
		1,视图可以节省SQL语句,把一条复杂的查询语句,实用视图进行保存,以后直接调用这个视图,就OK了
		2,安全,视图操主要是针对于查询,操作视图(删除,修改).是不会引响到基表数据
		3,视图往往是在大项目中使用,而是是多系统,保障数据库的安全
			* 这么说,给你个视图.其实这个视图里面我隐藏了很多的信息('字段'),那么你仅仅只能看到我想让你看到的.
			* 就是让人猜不到,我们的数据设计,字段之类的.
		4,视图可以对外友好型:不同的视图提供不同的数据,对外好像专门设计
		5,视图可以更好(容易)的进行权限控制

		
----------------------------
MySQL - 视图查看			|
----------------------------
	# 查看视图的结构
	# 视图是一张虚拟表,那么表的所有查看方式都适用于视图
		show tables like '%[视图名]%';
		desc [视图名];
		show create table [视图名];
	# 视图比表还是有个关键字区别:views ,查看'视图'的时候,尽量使用views
		show create views [视图名];

----------------------------
MySQL - 视图创建			|
----------------------------
	# create view [视图名字] as select 语句;
		* 该select语句可以是普通查询,连接查询,联合查询,子查询
	['创建单表视图']
		* 基表只有一个
		create view [视图名] as select * from stu;
		* 可以增删改

	['创建多表视图']
		* 基表起码两个
		create view [视图名] as select * from stu as s left join class as c on s.classId=c.classId;
			* 注意,'连接查询中不能有名称重复的字段,不然创建失败'.
		* 多表视图,只能该
	# 视图一旦创建,会在对应的数据库的文件夹下创建同名的结构文件(.frm)

----------------------------
MySQL - 视图使用			|
----------------------------
	# 使用视图,是为了查询.把视图当作表一样查询
	# select * from [视图名];
	# 视图的执行,其实本质上就是执行的封装的SELECT语句
		* create view [视图名] as select......//后面这个select就是封装视图
	# 其实就是为了封装一条SELECT语句,有点像函数.为了复用
	
----------------------------
MySQL - 视图修改			|
----------------------------
	# 视图本身,不可修改.但是视图的来源是可以修改的
	# 修改视图,其实就是修改视图本身的来源语句:select
	# alter view [视图名称] as [新的select...]

----------------------------
MySQL - 视图删除			|
----------------------------
	# drop view [视图名称].
	# 删除视图,不会删除到表中的数据





------------------------------------------------


----------------------------
MySQL - 视图数据操作--新增	|
----------------------------
	# 视图的的确确是可以进行写操作的,但是有很多限制
	# 数据新增就是直接对视图进行数据新增
		1,多表视图不能新增数据
	# 单表视图可以插入数据
		* 但是,视图插入的时候,必须要有基表中所有的不能为空的字段对应的数据
		* 通俗:
			a 表里面有个name字段,不能为空.
			a表的视图其实是没有name这个字段的,执行插入的时候就会失败.
			如果a表中的这个字段是可以为null,或者是有默认值的,那么是可以执行成功的
		* 视图是可以向基表插入数据的
	
	# insert into [视图名称] values(, , , ,);

----------------------------
MySQL - 视图数据操作--删除	|
---------------------------
	# 多表视图,不能删除数据
	# delete from [视图名] where 条件... ...
	# 直接是可以删到基表数据的


----------------------------
MySQL - 视图数据操作--更新	|
----------------------------
	# 数据的更新,单表,多表视图都可以更新数据
	# 更新限制:
		with check option
		* 如果对视图在新增的时候.限定了某个字段有限制.那么对视图进行更新操作的时候,系统会进行验证
		* 验证,保证更新之后,数据依然可以被视图查询出来.不然,不让更新
		
		create view [视图名称] as slect ...where age > 10 with check option;
		* 该视图的数据来源都是年龄大于10的,with...限制了通过视图执行更新的时候,新增,或者插入的数据都必须满足age > 10的这个条件
	# update [视图名称] set xx = xxx....
	# 你只能操作你看到的数据
  




----------------------------
MySQL - 视图算法			|
----------------------------
	# 系统对视图以外的查询视图的Selct语句的一种解析方式
	# 视图算法分为三种
		1,undefind			//未定义,默认的.但是这不是一种实际使用的算法.这是一种推卸责任的算法.让系统自己看着办
		2,temptable		
			* 临时表算法:系统先执行视图的select语句,后执行外部的select 语句
		3,merge
			* 合并算法:系统应该先把系统对应的select语句与外部的select语句进行合并,然后执行查询.常态(系统经常选择它,效率高)
		
	# 创建视图的时候,就可以指定算法
		create algorithm = [指定算法] [视图名称] as selct ...语句
	

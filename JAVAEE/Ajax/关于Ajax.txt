1,AJAX是个什么鬼？
Ajax 异步  --- >  就是现实生活中同步的意思！
*   asynchronous javascript and xml:异步的JS和XML
*   它能使用JS访问服务器,而且是异步访问
*   服务器给客户端的响应一般是整个页面,也就是一个完整的html页面,但是在ajax中因为是局部刷新,那么服务器就不用再响应整个页面,而只是数据
    > text:纯文本
    > xml:数据交换(JS不认识JAVA的对象,JAVA也不认识JS的对象,但是他们俩都认识xml!所以我们可以把对象以xml的形式表示出来,那么js跟java都能进行数据交互了)
    > json:它是JS提供的数据交换格式,它在Ajax中最受欢迎
2,异步交互和同步交互
同步:
   > 发一个请求,就要等待服务器响应结束,才能发第二个请求!中间这段时间就一个字:卡
   > 刷新的是整个页面
异步(Ajax):
   > 发送一个请求后,无需等待服务器响应,然后就可以发第二个请求
   > 可以使用javascript来接收服务器的响应,然后使用js来局部刷新



AJAX常见的应用场景
	百度搜索框,你输入关键字的时候,下面会列出来相关的热点内容,这个就是局部刷新
	(当文本框的内容被改变,那么就立刻的被浏览器把数据发送给服务器,服务器把相关的查询结果在返回来)
	用户名校验
	(客户输入账户后,还没提交表单的时候浏览器就已经收到提示:帐号不存在,帐号已经被注册... ...等信息)

AJAX优缺点
优点:
	异步交互,增强用户体验
	性能,因为服务器无需再响应整个页面,只需要响应部分内容,因此减轻了服务器压力】
缺点:
	AJAX不能应用在所有场景,并不是什么都能用AJAX.
	AJAX无端增多的服务器的访问次数,给服务器带来了压力
===============================
AJAX发送异步请求(四步操作)
1,第一步(得到XMLHttpRequest对象)
   * AJAX其实只需要学习一个对象--XMLHttpRequest.如果掌握了它,就掌握了Ajax
   * 得到XMLHttpRequest
   > 大多数浏览器都支持: var xmlHttp = new XMLHttpRequest();
   > IE6.0: var xmlHttp = new ActiveXObject("Msxml2.XMLHTTP");
   > IE5.5以及更早版本的IE: var xmlHttp = new ActiveXObject("Microsoft.XMLHTTP");
   *创建XMLHttpRequest的函数
function ctreateXMLHttpRequest()
{
	try
	{
		return new XMLHttpRequest();
	}
	catch(e)
	{
		try
		{
			return new ActiveXObject("Msxml2.XMLHTTP");
		}
		catch(e)
		{
			try
			{
				return new ActiveXObject("Microsoft.XMLHTTP");
			}
			catch(e)
			{
				alert("为了更好的体验,请切换浏览器访问本站");
				throw e;
			}
		}		
	}
}

2,第二步,打开与服务器的连接
   * xmlHttp.open();用来打开与服务器的连接,需要三个参数
   > 请求方式,可以是GET或者是POST
   > 请求的URL,指定服务器端资源.例如:/Demo/AServlet
   > 请求是否是否为异步,boolean值,如果为true.表示发送异步请求,否则同步请求
   * xmlHttp.oppen("GET","/Demo/Aservlet",true);//这一步并没有发送请求

3,第三步,发送请求
   * xmlHttp.send(null);//如果不给null参数,可能会造成部分浏览器无法发送
   > 参数的含义:参数就是请求体,如果是GET请求,必须给出null
   
4,第四步,得到响应
   * 在xmlHttp对象的一个事件上注册监听器:onreadystatechange
   * xmlHttp对象一共有五个状态
	   > 0状态:刚创建,还没有调用oppen();方法
	   > 1状态:请求开始,调用了oppen();方法,但还没调用send方法
	   > 2状态:请求发送完成,调用完了send方法
	   > 3状态:服务器已经开始响应,但不表示响应结束了
	   > 4状态:服务器响应结束(通常我们只关心这个状态...)
   * 得到xmlHttp对象的状态
	   > xmlHttp.readyState();返回一个状态码int值,可能是0,1,2,3,4
   * 得到服务器的响应的状态码
	   > var status = xmlHttp.status;//例如为:200,404,500
   * 得到服务器响应的内容
	   > var content = xmlHttp.responseText;//得到服务器响应的文本格式的内容
	   > var content = xmlHttp.response.XML;//得到服务器响应的xml格式的内容(它是Document对象了)
   * 代码---
   xmlHttp.onreadyStatechange = function()//监听方法
   {
   	//xmlHttp的五种状态都会调用本方法
   	if(xmlHttp.readyState == 4 && xmlHttp.status == 200)
   	{
  		//双重判断:是否为4状态,是否为200.并获取服务器的响应内容
   		var text = xmlHttp.responseText;
   	}
   };
==============================================GET实例代码
 	<script type="text/javascript">
		function createXMLHttpRequest()//创建异步对象
		{
			try
			{
				return new XMLHttpRequest();//大多数浏览器
			}
			catch(e)
			{
				try
				{
					return new ActiveXObject("Msxml2.XMLHTTP");//IE6.0
				}
				catch(e)
				{
					try
					{
						return new ActiveXObject("Microsoft.XMLHTTP");//IE5.5以及更早版本
					}
					catch(e)
					{
						alert("为了更好的体验,请立即更换浏览器访问本站");
						throw e;
					}
				}
			}
		}
		window.onload = function()//文档加载完毕后执行
		{
			var btn = document.getElementById("btn");
			btn.onclick = function()//给摁钮的点击事件注册监听 
			{
				/*
					四步操作,得到服务器的响应
					把响应显示到h1元素中
				*/
				var xmlHttp = createXMLHttpRequest();
				xmlHttp.open("GET", "<c:url value='/Aservlet'/>", true);
				xmlHttp.send(null);//GET请求没有请求体,但是也要给出null,不然FireFox可能无法发送
				xmlHttp.onreadystatechange = function()//当xmlHttp状态发生变化时执行
				{
					if(xmlHttp.readyState == 4 && xmlHttp.status == 200)//双重判断
					{
						//获取服务器的响应结果
						var text = xmlHttp.responseText;
						var h1 = document.getElementById("h1");
						h1.innerHTML = text;
					}
				}
			}
		};
	</script>
==============================================POST实例代码
对于POST请求方式而言,如果发送时带有参数,一般都用POST请求
Content-Type:application/x-www-form-urlencoded
注意点:
 * xmlHttp.open("POST","URL",true);//在执行这个方法的时候要给出POST字符串
 * 添加一步操作:设置Content-Type请求头
	 > xmlHttp.setRequestHeader("Content-Type","application/x-www-form-urlencoded");  //死东西
	 > send的时候:xmlHttp.send("userName=Kevin&passWord=123");//发送请求时候,指定请求体

-----------------
 代码:
 <script type="text/javascript">
		function createXMLHttpRequest()//创建异步对象
		{
			try
			{
				return new XMLHttpRequest();//大多数浏览器
			}
			catch(e)
			{
				try
				{
					return new ActiveXObject("Msxml2.XMLHTTP");//IE6.0
				}
				catch(e)
				{
					try
					{
						return new ActiveXObject("Microsoft.XMLHTTP");//IE5.5以及更早版本
					}
					catch(e)
					{
						alert("为了更好的体验,请立即更换浏览器访问本站");
						throw e;
					}
				}
			}
		}
		window.onload = function()//文档加载完毕后执行
		{
			var btn = document.getElementById("btn");
			btn.onclick = function()//给摁钮的点击事件注册监听 
			{
				/*
					四步操作,得到服务器的响应
					把响应显示到h1元素中
				*/
				var xmlHttp = createXMLHttpRequest();
				//当请求为POST的时候,需要修改open参数 【POST不同之处】
				xmlHttp.open("POST", "<c:url value='/Aservlet'/>", true);
				//当请求为POST的时候,需要手动添加请头【POST不同之处】
				xmlHttp.setRequestHeader("Content-Type","application/x-www-form-urlencoded");
				//给出请求体【POST不同之处】
				xmlHttp.send("userName=kevin&passWord=123456");//GET请求没有请求体,但是也要给出null,不然FireFox可能无法发送
				xmlHttp.onreadystatechange = function()//当xmlHttp状态发生变化时执行
				{
					if(xmlHttp.readyState == 4 && xmlHttp.status == 200)//双重判断
					{
						//获取服务器的响应结果
						var text = xmlHttp.responseText;
						var h1 = document.getElementById("h1");
						h1.innerHTML = text;
					}
				}
			}
		};
	</script>

  </head>
  
  <body>
	<button id="btn">点击这里</button>
	<h1 id="h1"></h1>
  </body>
===================================================
响应内容为xml
* 服务器端要进行修改
 > 设置响应头:ContentType的值为:text/xml;charset=utf-8
* 客户端
 > var doc = xmlHt
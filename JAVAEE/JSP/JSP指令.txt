JSP三大指令
1,page --> 最复杂<%@page language="java" info="xxx"%>
   * pageEncoding
	> 指定当前JSP页面的编码,只要跟文本也是按照这个指定格式来解析。就不会出现乱码
	  服务器要把JSP编译成JAVA代码的时候,就需要使用pageEncoding
   * contentType --
	> 表示添加一个响应头:ContenType!等同于response.setContentType("text/html;charset=utf-8");
	   -----如果上面这个两个值指令,只出现了一个。那么另一个的默认值为设置的那一个。
	   -----如果两个属性都没有设置,那么默认为ISO
   * import
	>导包,唯一一个就可以出现多次的属性:<%@page import="java.util.*"%>
   * errorPage
	> 如果当前页面抛出异常,那么要'转发'到哪一个页面。由这个指令来指定。
	> 并且客户端不会报500错误.状态码为200状态。
   * isErrorPage
	> 它指定当前页面是否为处理错误的页面。当isErrorPage="true"。这个页面会设置状态码:500。并且可以使用9大内置对象的Exception 
	> 除了可以在JSP的page指令来配置错误页面.还可以在web.xml文件中指定错误页面。这种方式其实与page无关。
	<error-page>	<!--当出现404的时候去这个页面-->
		<error-code>404</error-code>
		<location>/error404.jsp</location>
	</error-page>
	<error-page>	<!--当服务器异常的时候去这个页面-->
		<error-code>500</error-code>
		<location>/error500.jsp</location>
	</error-page>	
	<error-page>	<!--当服务器出现Runtime异常的时候去这个页面-->
		<exception-type>java.lang.RuntiomeException</exception-type>
		<loaction>/error.jsp</location>
	</error-page>
   *  autoFlush	(鸡肋)
	> 表示在out对象的缓冲区满时如何处理！当autohFlush="true"时.表示缓冲区满的时候把内容数据输出到客户端。autoFlush="false" 缓冲区满,抛出异常。默认是true
   *  buffer	(鸡肋)
	> 表示当前的JSP输出流(out隐藏对象)的缓冲区大小。默认是8KB。通常不需要修改。
   * isELgnored
	> 是否忽略el表达式,默认值是false.即不忽略！老版本(我们是看不着了)的JSP默认值是ture。
   * language	(基本没用)
	> 值得当前JSP编译后的语言类型。默认值是JAVA！它也编译不出来其他的(主要是开发者的野心,希望JSP能编译出其他语言来――逗)
   * info	(基本没用)
	> 呵呵，就是:说明性信息
   * isThreadSafe	(基本没用)
	> 当前的JSP是否支持并发访问。默认值是false。为true的时。JSP生成的servlet会去实现一个'已经过时'的标记接口:SingleThreadNodel,这时jsp就只能处理单线程的访问
   * session
	> 当前页面是否支持session。如果为false，那么当前页面就没有session这个内置对象(不能使用)。
   * extends
	> 让JSP生成的servlet去继承这个属性指定的类
2,include --> 静态包含
   作用：
   把页面分解,使用包含的方式组合在一起。这样一个页面中不变的部分。就是一个独立的JSP。我们只需要处理变化的页面。
	> 多个JSP页面中都包含同样的导入标签。每个都有同样的，太累。那么我就可以新建一个jsp页面导入所有需要的类。再让需要导入的JSP去包含(include)这个JSP就行了。

   - 与RequestDispatcher的include();方法相似！但是略有不同
   - <%@include%>  表示JSP编译成JAVA文件时完成的！他们共同生成一个JAVA文件(servlet),然后再生成一个class。
   - RequestDispatcher的include()是一个方法，包含和被包含的是两个Servlet,他们只是把响应的内容,在运行时合并。
   * file
	> <%@include file="x.jsp">其中file就表示要包含的JSP文件。这个file的值不能是变量！因为这个东西是在编译成JAVA文件的时候就合并成了一个Servlet！
	> 如果是变量,那么变成class文件的时候才有用！如果换成,那么jsp就不认识你的表达式是指向的哪个jsp文件。因为是个变量不是具体的JSP页面！
	> 而且被包含的页面要注意不能跟主页面有重复的累赘元素(只能单一存在的元素<html>,<baody>,<head>... ...)

   ------总结
	语法：<%@include file="页面"%>
	include指令的作用是包含指定的页面！在jsp被编译成java文件之前会把两个jsp文件合并，然后再编译成一个java文件。

	注意：
	<%@include file="<%=myfile%>" %>
	这是不能通过编译的，因为myfile是一个变量，它的值只有在java编译成class后执行时才能确定。而include指令需要在jsp编译java时就要确定包含的是哪个页面，所以...

3,taglib --> 导入标签库
   * prefix
	> 指定标签库在本页面中的前缀
   * uri
	> 知道标签库的位置
   <%@taglib prefix="pre" uri="/stuts-tages"%>
	     |--使用标签必须加上前缀名   |--定义了很多标签的标签库
   防止标签重名	 


一个JSP页面可以中有0-N个指令的定义.
JSP指令其实不需要放在第一行,但是现在放在第一行已经成了规范。并不代表只能放在第一行

在WEB.xml文件中配置
<jsp-config>
	<jsp-property-group>
		<url-pattern>*.jsp</url-pattern> <!--表示对所有jsp进行配置-->
		<el-ignored>true</el-ignored> <!--忽略EL表达式-->
		<page-encoding>UTF-8</page-encoding> <!--编码为utf-8-->
		<scripting-invalid>true</scripting-invalid> <!--禁用java脚本-->
	</jsp-property-group>
</jsp-config>


类加载器	classLoader
一,作用
	把class文件,加载到JVM方法区中,变成一个Class对象

二,得到类加载器
	1,this.getClass().getClassLoader();
	2,Class.getClassLoader();

三,分类
	类加载器分三类
	他们,其实都是片警,都只是负责自己的区域
1,引导类加载器
	> 负责加载:基础类库rt.jar
	> jdk安装目录-jre-lib-rt.jar
	> 负责加载自己人,JAVA的基础类库

2,扩展类加载器
	> jdk安装目录-jre-lib-ext
	> ext下面都是扩展jar包
3,系统类加载器
	> 加载应用下的类文件,也就是我们自己写的,以及我们使用的第三方jar包
	> 准确的说,应该是加载classpath路径下的类

四,级别
	引导 > 扩展 > 系统

五,委托机制
	类加载器的委托机制
例:
	我们写的代码中出现了: new A();
系统发现了自己加载的类包含了这句,这说明系统要去加载A类,
但是,他不加载,他会委托自己的上级,也就是叫扩展去找,
扩展也不找,他也委托引导去找,引导就真的去rt.jar中寻找A.
如果被引导找到了那么就加载,返回A对应的Class给扩展,扩展又返回给系统
如果没找到,系统给扩展返回一个null,扩展就会在自己地盘开始找一下.如果找到了就加载,并且把Class返回给系统.
没找到就给系统返回一个null;当都没找到的时候,系统就会自己去找
如果系统在自己的地盘,找到了,就自己加载.没找到就跑出异常:ClassNotFoundException

	 这种机制带来的好处就是,引导的类库,只能被引导加载,系统的类库,只能由系统加载,扩展的只能由扩展自己加载
	 这种方式安全. 

六,类的解析过程
class Demo//系统加载
{
	public static void main()
	{
		A a = new A();//系统加载
		String s = new String();//也由系统加载
	}
}
class String//被引导加载
{
	private Integer 1;//直接引导加载
}

7,线程
	每个线程都有自己的一个类加载器
	Thread 对象有一个方法
	> getContextClassLoader();
	> 返回的就是当前线程的类加载器

8,自定义类加载器
	现在对我们来说,是没有意义的!

9,Tomcat
	Tomcat提供了两种类加载器,俩类！
	> 一个是Tomcat下,'服务器加载器',专门加载CTALINA_HOME
	> 一个就是'应用类加载器',负责加载,lib/classes这俩路径下的类

